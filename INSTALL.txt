Requirements
============

* cmake
* Boost library
* PCRE library

Optional
--------

* RE2 - for faster regular expressions
* SWIG - for integration with scripting languages (e.g. Perl, Python)
* Perl library: development files - (Ubuntu package: libperl-dev) - for Perl bindings
* GraphViz library: development files - (Ubuntu package: libgraphviz-dev) - for gv-writer
* Following libraries (development files) for pdf-reader:
  * Poppler (Ubuntu package: libpoppler-dev)
  * Poppler-glib (Ubuntu package: libpoppler-glib-dev)
  * GTK2 (Ubuntu package: libgtk2.0-dev)
* LibMagic library: development files - (Ubuntu package: libmagic-dev)
* Antiword (Ubuntu package: antiword) - for doc-reader
* DjVuLibre library: development files - (Ubuntu package: libdjvulibre-dev) - for djvu-reader
* Link Grammar library: development files - (Ubuntu package: liblink-grammar4-dev) - for link-parser
* Bison and Flex tools - (Ubuntu packages: bison flex) - for gobio
* CMPH library: development files - (Ubuntu package: `libcmph-dev`)


Ubuntu 11.10
------------

Required packages: g++ cmake make libpcre3-dev libboost-program-options-dev libboost-graph-dev libboost-filesystem-dev libboost-serialization-dev libboost-thread-dev libboost-system-dev libboost-test-dev

Optional packages: swig libperl-dev python python-all-dev openjdk-6-jdk libgraphviz-dev libpoppler-dev libpoppler-glib-dev libgtk2.0-dev libmagic-dev liblog4cpp4-dev libaspell-dev antiword libdjvulibre-dev liblink-grammar4-dev

Ubuntu 10.04
------------

Ubuntu 10.04 might use Boost 1.40, but Boost >=1.42 is needed:

    sudo apt-get install python-software-properties
    sudo add-apt-repository ppa:lucid-bleed/ppa
    sudo apt-get update
    sudo apt-get upgrade
    sudo apt-get install g++ cmake make libpcre3-dev swig libperl-dev python python-all-dev libboost-program-options1.42-dev libboost-graph1.42-dev libboost-filesystem1.42-dev libboost-serialization1.42-dev libboost-thread1.42-dev libboost-system1.42-dev libboost-test1.42-dev

(Some of the above steps might turn out to be unnecessary, it depends
on whether it is a server or regular version).

Compilation procedure
=====================

(On Linux.)

   cd psi-toolkit
   mkdir -p build
   cd build
   cmake -DUSE_JAVA=OFF .. # <- note dots here
   # or cmake -DUSE_JAVA=ON if morfologik is needed
   # if problem with JAVA PATH occurs try forcing dirs by: cmake -DUSE_JAVA=ON -DJAVA_INCLUDE_PATH2=/usr/lib/jvm/java-7-openjdk-amd64/include/linux/ -DJAVA_INCLUDE_PATH=/usr/lib/jvm/java-7-openjdk-amd64/include/ .. (remember to use correct java folder in command)
   make

running:
e.g. simple tokenisation:

    framework/psi-pipe tp-tokenizer --lang pl

Running tests
=============

There are two types of tests that can be run after compiling
psi-toolkit: unit tests and "mass" tests.

Before pushing any changes to the repository, always check whether
PSI-Toolkit passes ALL the tests:

    ./tests/test_runner
    ./tests/mass-tests ..

DO NOT PUSH A VERSION FAILING THE TESTS!!!

Unit tests
----------

To run unit tests, run:

    ./tests/test_runner

Boost Test library was used, `test_runner` has some options provided by this library.
To see the options, run:

    ./tests/test_runner --help


In particular, you can limit the set of tests to be run by typing:

    ./tests/test_runner --run_test=TEST_SUITE_NAME

If you want to add new unit tests, please create `t/` subdirectory and
put test source files there, see `tools/parsers/gobio/t/` for an example.

"Mass" tests
------------

Mass tests consists in running a given PSI-pipe on some input and
checking whether the output is the same is expected. To run mass tests, type:

   ./tests/mass-tests ..

You can limit mass tests to some particular directory, e.g. in order to run tests of
tokenizers, use the command:

   ./tests/mass-tests ../tools/tokenizers/

Note that the output generated by mass-tests will overwrite the
original expected output! (That's why if you just run `mass-tests` for
the second time there will be no failures). The failed tests can be
easily, however, identified by running `git status`. Please commit the
new test output if it is actually OK.

Installation procedure
======================

    cd psi-toolkit
    mkdir -p build
    cd build
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DUSE_JAVA=ON -DIS_INSTALLABLE=ON CMAKE_BUILD_TYPE=Release ..
    make

And as root:

    make install

In general, however, it is better to use pre-packaged PSI-Toolkit, see:
http://psi-toolkit.wmi.amu.edu.pl/download.html
